:Errata:
in my 5e53b45..083e39c commit I meant the LEXER is finished, not the parser. Just wanted to get that out of the way.

:BEGIN FILE:
storage format:
    game.lge                sprite descriptor and sprite graph (lgescript)
    game.assets/bg.png      background
    game.assets/*.png       sprites

general:
    a state runs on a 250 clock

bg.png:
    400x400 pixels

game.lge:
.sprite
<id>
<image name>
<x y coordinates>

.state
<id>
<on clock actions>

Grammar
=======

The language is called LGEScript. It's a hybrid declarative/iterative/state-machiney scripting language. Wrap your head around THAT!

c.f. with parser.y the grammar section.

file ::= file | item ;
item ::= sprite | state ;

sprite ::= ".sprite" INT PATH ;
state ::= ".state" INT code ;

code ::= codes ".end" ;
codes ::= codes block | block ;
block ::= block '&' statement | statement ;
statement ::= set_statement
              | conditional_statement
              | transition_statement
              ;

PATH ::= *
IDENT ::= [a-zA-Z_][a-zA-Z_0-9]*
VAR ::= '$' INT | '$' IDENT ;
set_statement ::= ".set" INT | ".reset" INT
                | ".set" VAR arithmetic_expression
                | ".reset" "all"
                ;
transition_statement ::= ".transition" INT ;

isset_expression ::= "set" INT | "reset" INT ;

arithmetic_expression ::= 'mul' operand operand
                        | 'div' operand operand
                        | 'mod' operand operand
                        | 'sum' operand operand
                        | 'sub' operand operand
                        | INT
                        ;

operand ::= VAR | arithmetic_expression ;

equality_expression ::= '=' operand operand
                      | '!' operand operand
                      | '<' operand operand
                      | '>' operand operand
                      ;

rng_expression ::= '%.' INT ;

atomic_condition ::= isset_expression
                   | equality_expression
                   | rng_expression
                   ;

condition ::= condition '&' atomic_condition | atomic_condition ;

conditional_statement ::= ".if" condition ';' block ".fi" ;

EXAMPLE FILE
============

// this is not final and contains bugs ; work in progress

.sprite
1
player_left.png

.sprite
2
player_right.png

.sprite
10
player_bullet_left.png
.sprite
11
player_bullet_left_2.png

.sprite
20
player_bullet_right.png
.sprite
21
player_bullet_right_2.png

.sprite
15
player_bullet_left_explode.png
.sprite
16
player_bullet_left_2_explode.png
.sprite
17
player_bullet_left_3_explode.png

.sprite
25
player_bullet_right_explode.png
.sprite
26
player_bullet_right_2_explode.png
.sprite
27
player_bullet_right_3_explode.png

.sprite
117
enemy_left_3.png
.sprite
116
enemy_left_2.png
.sprite
115
enemy_left.png

.sprite
227
enemy_right_3.png
.sprite
226
enemy_right_2.png
.sprite
225
enemy_right.png

.sprite
256
dead.png

.state
0
.set 1
.if set 117 & = $0 0 ; .set $0 1 .fi
if set 117 & = $0 1 ; .reset 117 & .set 116 & .set $0 0 fi
if set 227 & = $1 0 ; set $1 1 fi
if set 227 & = $1 1 ; reset 227 & set 226 & set $1 0 fi 
if %.4 ; set 117 fi       // if 40% chance
if %.4 ; set 227 fi
if $right ; transition 1 fi
if = $11 3 ; reset 13 & set $11 0 fi
if = $11 2 ; reset 12 & set 13 & set $11 3 fi
if = $11 1 ; reset 11 & set 12 & set $11 2 fi
if = $11 0 & $fire ; set 11 & set $11 1 fi
if set 11 & set 115 ; reset 115 & reset 11 & set 15 fi
if set 12 & set 116 ; reset 116 & reset 12 & set 16 fi
if set 13 & set 117 ; reset 117 & reset 13 & set 17 fi
if reset 11 & set 115 ; reset all & set $5 0 & transition 5 fi
.if set 225 ; .reset all & .set $5 0 & .transition 5 .fi
.end

.state
1
reset 1
set 2
if 117 & = $0 0 ; set $0 1 fi
if 117 & = $0 1 ; reset 117 & set 116 & set $0 0 fi
if 227 & reset $1 ; set $1 fi
if 227 & set $1 ; reset 227 & set 226 & reset $1 fi
if %.4 ; set 117 fi       // if 40% chance
if %.4 ; set 227 fi
if $left ; transition 0 fi
// idem as above logic

.state
5
if = mod $5 2 0 ; set 256 fi
if = mod $5 2 1 ; reset 256 fi
if = $5 5 ; transition 1 fi
set $5 + $5 1
